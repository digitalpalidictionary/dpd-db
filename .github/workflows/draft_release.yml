name: Draft Release

on: 
 workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:

    # ----------------------------------------
    # Setup
    # ----------------------------------------

    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        repository: 'digitalpalidictionary/dpd-db'
        ref: 'main'
        submodules: 'recursive'
        # Fetch depth 0 to allow committing back to the submodule
        fetch-depth: 0
        # Use PAT to allow pushing to submodule
        token: ${{ secrets.GH_PAT }}

    - name: Remove large dirs
      run: |
        rm -rf ${{ github.workspace }}/resources/bjt/dev/*
        rm -rf ${{ github.workspace }}/resources/sc-data/html_text/*

    - name: Unzip deconstructor_output
      run: |
        cd ${{ github.workspace }}/resources/deconstructor_output
        tar -xzvf deconstructor_output.json.tar.gz
        ls -la
        cd ${{ github.workspace }}/
    
    - name: Install dictzip
      run: sudo apt-get update && sudo apt-get install -y dictzip

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: 3.11

    - name: Install uv
      run: curl -LsSf https://astral.sh/uv/install.sh | sh
    
    - name: Install dependencies
      run: uv sync

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22.2'

    # ----------------------------------------
    # Build Database
    # ----------------------------------------

    - name: Config for GitHub release
      run: uv run python scripts/build/config_github_release.py

    - name: Create dpd.db
      run: touch dpd.db

    - name: Build the database
      run: uv run python scripts/build/db_rebuild_from_tsv.py

    - name: Run initial setup script
      run: uv run bash scripts/bash/initial_setup_run_once.sh
    
    - name: Create version
      run: uv run python tools/version.py

    - name: Create Inflection Templates
      run: uv run python db/inflections/create_inflection_templates.py

    - name: Create Inflection Tables
      run: uv run python db/inflections/generate_inflection_tables.py

    - name: Update Sanskrit Family Roots
      run: uv run python scripts/build/sanskrit_root_families_updater.py

    - name: Add Root Families
      run: uv run python db/families/family_root.py

    - name: Add Word Families
      run: uv run db/families/family_word.py
    
    - name: Add Compound Families
      run: uv run python db/families/family_compound.py

    - name: Add Sets
      run: uv run python db/families/family_set.py

    - name: Add Idioms
      run: uv run python db/families/family_idiom.py

    - name: Families to JSON
      run: uv run python scripts/build/families_to_json.py

    - name: Extract Variants
      run: uv run python db/variants/main.py

    - name: Run Deconstructor
      run: uv run python scripts/build/deconstructor_output_add_to_db.py
        
    - name: Add api ca eva iti to inflections 
      run: uv run python scripts/build/api_ca_eva_iti_iva_hi.py

    - name: Transliterate Inflections
      run: uv run python db/inflections/transliterate_inflections.py

    - name: Inflections to Headwords
      run: uv run python db/inflections/inflections_to_headwords.py

    - name: Generate Grammar data
      run: uv run python db/grammar/grammar_to_lookup.py

    - name: Lookup Variants and Spelling Mistakes 
      run: uv run python db/lookup/spelling_mistakes.py

    - name: Lookup Transliterate
      run: uv run python db/lookup/transliterate_lookup_table.py

    - name: Lookup Help and Abbreviations
      run: uv run python db/lookup/help_abbrev_add_to_lookup.py

    - name: Add Frequency
      run: |
        go build -o frequency go_modules/frequency/main.go
        ./frequency

    - name: Run EBT Counter
      run: uv run python scripts/build/ebt_counter.py

    - name: Add EPD to Lookup Table
      run: uv run python db/epd/epd_to_lookup.py
      
    - name: Test Dealbreakers
      run: uv run python scripts/build/dealbreakers.py

    # ----------------------------------------
    # Exporter
    # ----------------------------------------
           
    - name: Export Grammar Dictionary
      run: uv run python exporter/grammar_dict/grammar_dict.py
    
    - name: Export GoldenDict & MDict
      run: uv run python exporter/goldendict/main.py

    - name: Export Deconstructor
      run: uv run python exporter/deconstructor/deconstructor_exporter.py

    - name: Export Kindle & ePub
      run: uv run python exporter/kindle/kindle_exporter.py

    - name: Export Kobo
      run: uv run python exporter/kobo/kobo.py

    - name: Export Variants
      run: uv run exporter/variants/variants_exporter.py
    
    - name: Check disk space and memory
      run: |
        free -h  # Check available memory
        df -h    # Check disk space
           
    - name: Zip GoldenDict & Mdict
      run: uv run python scripts/build/zip_goldendict_mdict.py

    - name: Tarball DB
      run: uv run python scripts/build/tarball_db.py

    # ----------------------------------------
    # Uposatha Day Check
    # ----------------------------------------

    - name: Check if Uposatha day
      id: uposatha_check
      run: |
        if uv run python tools/uposatha_day.py; then
          echo "is_uposatha=true" >> $GITHUB_OUTPUT
          echo "Today is an Uposatha day - count updated"
        else
          echo "is_uposatha=false" >> $GITHUB_OUTPUT
          echo "Today is not an Uposatha day"
        fi

    # ----------------------------------------
    # Prepare Submodules (Uposatha day only)
    # ----------------------------------------
    
    - name: Sync all submodules with Upstream
      if: steps.uposatha_check.outputs.is_uposatha == 'True'
      run: |
        for submodule in resources/fdg_dpd resources/bw2 resources/sc-data resources/tpr_downloads; do
          echo "Syncing $submodule..."
          cd "$submodule"
          if [ "$submodule" = "resources/tpr_downloads" ]; then
            branch="master"
          else 
            branch="main"
          fi
          git fetch origin $branch
          git checkout $branch
          git reset --hard origin/$branch
          cd ../..
        done

    # ----------------------------------------
    # Export TBW and TPR
    # ----------------------------------------

    - name: Run TBW Exporter
      run: uv run python exporter/tbw/tbw_exporter.py

    - name: Run TPR Exporter
      run: uv run python exporter/tpr/tpr_exporter.py

    # ----------------------------------------
    # Update Submodules (Uposatha day only)
    # ----------------------------------------

    - name: Update All Submodules
      if: steps.uposatha_check.outputs.is_uposatha == 'True'
      shell: bash
      run: |
        declare -A submodules=(
          ["resources/fdg_dpd"]="fdg https://github.com/o28o/dictPlugin.git"
          ["resources/bw2"]="tbw https://github.com/thebuddhaswords/BW2.git" 
          ["resources/sc-data"]="sc https://github.com/digitalpalidictionary/sc-data.git"
          ["resources/tpr_downloads"]="tpr https://github.com/bksubhuti/tpr_downloads"
        )

        for path in "${!submodules[@]}"; do
          read name repo <<< "${submodules[$path]}"
          echo "Updating $name submodule..."
          cd "$path"
          echo "Current branch: $(git branch --show-current)"
          echo "Git status:"
          git status --short
          echo "Recent commits:"
          git log -1 --oneline
          
          if [ "$path" = "resources/tpr_downloads" ]; then
            branch="master"
          else
            branch="main"
          fi
          git checkout $branch
          git pull origin $branch
          
          # Run sutta central exporter
          if [ "$path" = "resources/sc-data" ]; then
            echo "Running Sutta Central exporter..."
            uv run python "$GITHUB_WORKSPACE/exporter/sutta_central/sutta_central_exporter.py"
          fi

          echo "=== POST-EXPORT STATUS ==="
          git status --short
          git add .
          echo "=== STAGED CHANGES ==="
          git diff --cached --name-only

          echo "Checking for Uposatha day to commit changes in $name submodule..."
          # Run the script from the workspace root to ensure uv finds the main pyproject.toml
          # and the script path is correct.
          if uv run python "$GITHUB_WORKSPACE/tools/uposatha_day.py"; then
            echo "Uposatha day: Checking for staged changes in $name."
            # Check if there are actual changes to commit.
            # `git diff --staged --quiet` exits 0 if no staged changes, 1 if there are.
            if ! git diff --staged --quiet; then
              echo "Staged changes detected in $name. Proceeding with commit."
              git config --global user.name "GitHub Actions"
              git config --global user.email "actions@github.com"
              
              if [ "$path" = "resources/sc-data" ]; then
                COMMIT_MSG="DPD $(date +'%Y-%m-%d') update"
              else
                COMMIT_MSG="DPD $(date +'%B') release"
              fi

              if git commit -m "$COMMIT_MSG"; then
                echo "Commit successful for $name."
                echo "=== PRE-PUSH STATUS for $name ==="
                git log -2 --oneline
                git remote -v
                
                echo "=== PUSHING CHANGES for $name ==="
                git push origin $branch:$branch
                echo "=== PUSH EXIT CODE for $name: $? ==="
              else
                echo "Error: git commit failed for $name even though changes were staged and it's an Uposatha day."
              fi
            else
              echo "No staged changes to commit in $name, despite it being an Uposatha day."
            fi
          else
            echo "Not an Uposatha day. Skipping commit and push for $name."
          fi

          cd "$GITHUB_WORKSPACE"
        done

    # ----------------------------------------
    # Create Draft Release
    # ----------------------------------------

    - name: Make Release Notes
      run: uv run python tools/docs_changelog_and_release_notes.py

    - name: Set Release Date
      id: set_release_date
      run: echo "RELEASE_DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

    - name: Set Release Tag
      id: set_release_tag
      run: echo "RELEASE_TAG=$(uv run python scripts/build/version_print.py)" >> $GITHUB_ENV
    
    - name: Create Draft Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        release_name: ${{ env.RELEASE_DATE }}
        body_path: exporter/share/release_notes.md

        draft: true
        prerelease: false

    # ----------------------------------------
    # Update Release Assets
    # ----------------------------------------

    - name: Upload Asset dpd-goldendict.zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: exporter/share/dpd-goldendict.zip
        asset_name: dpd-goldendict.zip
        asset_content_type: application/zip

    - name: Upload Asset dpd-mdict.zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: exporter/share/dpd-mdict.zip
        asset_name: dpd-mdict.zip
        asset_content_type: application/zip

    - name: Upload Asset dpd-kindle.epub
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: exporter/share/dpd-kindle.epub
        asset_name: dpd-kindle.epub
        asset_content_type: application/zip

    - name: Upload Asset dpd-kindle.mobi
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: exporter/share/dpd-kindle.mobi
        asset_name: dpd-kindle.mobi
        asset_content_type: application/zip

    - name: Upload Asset dpd.db.tar.bz2
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: exporter/share/dpd.db.tar.bz2
        asset_name: dpd.db.tar.bz2
        asset_content_type: application/zip

    - name: Upload Asset dpd-kobo.zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: exporter/share/dicthtml-pi-en.zip
        asset_name: dpd-kobo.zip
        asset_content_type: application/zip
